// Cambio necesario en el controlador AuthController de Spring Boot
// Solo necesitas modificar esta línea en el método @PostMapping("/register"):

// ANTES:
// String verificationUrl = "/api/auth/verify?token=" + verificationToken;

// DESPUÉS:
String verificationUrl = "http://localhost:3000/verify-email?token=" + verificationToken;

// Reemplaza "http://localhost:3000" con la URL de tu frontend en producción
// Por ejemplo: "https://tu-dominio.com/verify-email?token=" + verificationToken

/*
CONTROLADOR COMPLETO ACTUALIZADO:

@PostMapping("/register")
public ResponseEntity<?> register(@RequestBody User user) {
    try {
        if (user.getUserName() == null || user.getUserName().isBlank()
                || user.getUserEmail() == null || user.getUserEmail().isBlank()
                || user.getUserPassword() == null || user.getUserPassword().isBlank()) {
            return ResponseEntity.badRequest().body("Nombre, correo y contraseña son obligatorios.");
        }
        if (service.findByEmail(user.getUserEmail()).isPresent()) {
            return ResponseEntity.badRequest().body("El correo ya está registrado.");
        }
        user.setUserLastname(null);
        user.setUserProfilePicture(null);
        user.setIsEmailVerified(false);
        service.add(user);
        User savedUser = service.findByEmail(user.getUserEmail())
                .orElseThrow(() -> new IllegalStateException("Usuario no encontrado después de registrarse"));

        String verificationToken = jwtUtil.generateToken(savedUser.getUserEmail(), List.of("VERIFY_EMAIL"), 24 * 60 * 60 * 1000);
        service.updateUserToken(savedUser.getUserId(), verificationToken);

        EmailTemplate template = emailTemplateService.findByTemplateName("VERIFICAR CORREO");
        if (template == null || !template.isIsActive()) {
            throw new IllegalStateException("Plantilla de verificación no encontrada o inactiva");
        }

        // CAMBIO PRINCIPAL: URL apunta al frontend
        String verificationUrl = "http://localhost:3000/verify-email?token=" + verificationToken;
        String emailBody = template.getTemplateBody()
                .replace("{name}", savedUser.getUserName())
                .replace("{verificationUrl}", verificationUrl);

        List<File> attachments = template.getAttachments().stream()
                .map(attachment -> new File(attachment.getFilePath()))
                .filter(File::exists)
                .collect(Collectors.toList());

        emailService.sendEmailWithAttachment(savedUser.getUserEmail(), template.getTemplateSubject(), emailBody, attachments);
        return ResponseEntity.ok("Usuario registrado. Por favor, verifica tu correo electrónico.");
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Error al registrar el usuario: " + e.getMessage());
    }
}
*/
